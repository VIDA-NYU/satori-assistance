// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: image_sequence.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from image_sequence.proto</summary>
public static partial class ImageSequenceReflection {

  #region Descriptor
  /// <summary>File descriptor for image_sequence.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ImageSequenceReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRpbWFnZV9zZXF1ZW5jZS5wcm90byIuCglJbWFnZURhdGESDwoHY29udGVu",
          "dBgBIAEoDBIQCghmaWxlbmFtZRgCIAEoCSJxCg1JbWFnZVNlcXVlbmNlEhMK",
          "C3NlcXVlbmNlX2lkGAEgASgDEhUKDXNlcXVlbmNlX3R5cGUYAiABKAkSGgoG",
          "aW1hZ2VzGAMgAygLMgouSW1hZ2VEYXRhEhgKEHBsYXlpbmdfaW50ZXJ2YWwY",
          "BCABKAJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ImageData), global::ImageData.Parser, new[]{ "Content", "Filename" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ImageSequence), global::ImageSequence.Parser, new[]{ "SequenceId", "SequenceType", "Images", "PlayingInterval" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ImageData : pb::IMessage<ImageData> {
  private static readonly pb::MessageParser<ImageData> _parser = new pb::MessageParser<ImageData>(() => new ImageData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ImageData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImageSequenceReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageData(ImageData other) : this() {
    content_ = other.content_;
    filename_ = other.filename_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageData Clone() {
    return new ImageData(this);
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 1;
  private pb::ByteString content_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "filename" field.</summary>
  public const int FilenameFieldNumber = 2;
  private string filename_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Filename {
    get { return filename_; }
    set {
      filename_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ImageData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ImageData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Content != other.Content) return false;
    if (Filename != other.Filename) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (Filename.Length != 0) hash ^= Filename.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Content.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Content);
    }
    if (Filename.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Filename);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
    }
    if (Filename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ImageData other) {
    if (other == null) {
      return;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.Filename.Length != 0) {
      Filename = other.Filename;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Content = input.ReadBytes();
          break;
        }
        case 18: {
          Filename = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ImageSequence : pb::IMessage<ImageSequence> {
  private static readonly pb::MessageParser<ImageSequence> _parser = new pb::MessageParser<ImageSequence>(() => new ImageSequence());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ImageSequence> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ImageSequenceReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageSequence() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageSequence(ImageSequence other) : this() {
    sequenceId_ = other.sequenceId_;
    sequenceType_ = other.sequenceType_;
    images_ = other.images_.Clone();
    playingInterval_ = other.playingInterval_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageSequence Clone() {
    return new ImageSequence(this);
  }

  /// <summary>Field number for the "sequence_id" field.</summary>
  public const int SequenceIdFieldNumber = 1;
  private long sequenceId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SequenceId {
    get { return sequenceId_; }
    set {
      sequenceId_ = value;
    }
  }

  /// <summary>Field number for the "sequence_type" field.</summary>
  public const int SequenceTypeFieldNumber = 2;
  private string sequenceType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SequenceType {
    get { return sequenceType_; }
    set {
      sequenceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "images" field.</summary>
  public const int ImagesFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ImageData> _repeated_images_codec
      = pb::FieldCodec.ForMessage(26, global::ImageData.Parser);
  private readonly pbc::RepeatedField<global::ImageData> images_ = new pbc::RepeatedField<global::ImageData>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ImageData> Images {
    get { return images_; }
  }

  /// <summary>Field number for the "playing_interval" field.</summary>
  public const int PlayingIntervalFieldNumber = 4;
  private float playingInterval_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PlayingInterval {
    get { return playingInterval_; }
    set {
      playingInterval_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ImageSequence);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ImageSequence other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SequenceId != other.SequenceId) return false;
    if (SequenceType != other.SequenceType) return false;
    if(!images_.Equals(other.images_)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlayingInterval, other.PlayingInterval)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SequenceId != 0L) hash ^= SequenceId.GetHashCode();
    if (SequenceType.Length != 0) hash ^= SequenceType.GetHashCode();
    hash ^= images_.GetHashCode();
    if (PlayingInterval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlayingInterval);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SequenceId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SequenceId);
    }
    if (SequenceType.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SequenceType);
    }
    images_.WriteTo(output, _repeated_images_codec);
    if (PlayingInterval != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(PlayingInterval);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SequenceId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SequenceId);
    }
    if (SequenceType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SequenceType);
    }
    size += images_.CalculateSize(_repeated_images_codec);
    if (PlayingInterval != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ImageSequence other) {
    if (other == null) {
      return;
    }
    if (other.SequenceId != 0L) {
      SequenceId = other.SequenceId;
    }
    if (other.SequenceType.Length != 0) {
      SequenceType = other.SequenceType;
    }
    images_.Add(other.images_);
    if (other.PlayingInterval != 0F) {
      PlayingInterval = other.PlayingInterval;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SequenceId = input.ReadInt64();
          break;
        }
        case 18: {
          SequenceType = input.ReadString();
          break;
        }
        case 26: {
          images_.AddEntriesFrom(input, _repeated_images_codec);
          break;
        }
        case 37: {
          PlayingInterval = input.ReadFloat();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
